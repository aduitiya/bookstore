name: API Tests (Bookstore + Allure + Pages)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      BASE_URL: http://127.0.0.1:8000
      EMAIL: qa@example.com
      PASSWORD: StrongP@ssw0rd!

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------- Java & Maven ----------
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      # ---------- Python & FastAPI server ----------
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install server dependencies
        working-directory: server
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start FastAPI (background)
        working-directory: server
        run: |
          nohup python -m uvicorn main:app --host 0.0.0.0 --port 8000 > ../uvicorn.log 2>&1 &
          echo $! > ../uvicorn.pid

      - name: Wait for API to be ready (HTTP 200)
        run: |
          for i in {1..45}; do
            code=$(curl -fsS -o /dev/null -w "%{http_code}" "$BASE_URL/health" || echo 000)
            if [ "$code" = "200" ]; then
              echo "API is up"
              exit 0
            fi
            echo "Waiting for API... ($i/45) got HTTP $code"; sleep 2
          done
          echo "API did not become ready in time" >&2
          echo "---- uvicorn.log (first 200 lines) ----"
          sed -n '1,200p' uvicorn.log || true
          exit 1

      # ---------- Run tests ----------
      - name: Run Maven tests (TestNG)
        run: |
          mvn -B clean test \
            -DbaseUrl="${BASE_URL}" \
            -DEMAIL="${{ secrets.EMAIL || env.EMAIL }}" \
            -DPASSWORD="${{ secrets.PASSWORD || env.PASSWORD }}" \
            "-Dsurefire.printSummary=true"

      # ---------- Allure (generate report) ----------
      - name: Install Allure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl unzip
          sudo apt-add-repository ppa:qameta/allure -y || true
          sudo apt-get update
          sudo apt-get install -y allure

      - name: Fetch previous Allure history (gh-pages)
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          continue-on-error: true

      - name: Merge history into results
        run: |
          mkdir -p target/allure-results
          if [ -d gh-pages/history ]; then
            mkdir -p target/allure-results/history
            cp -r gh-pages/history/* target/allure-results/history/ || true
          fi

      - name: Generate Allure HTML report
        run: |
          allure generate target/allure-results --clean -o allure-report
          mkdir -p allure-report/history
          if [ -d target/allure-results/history ]; then
            cp -r target/allure-results/history/* allure-report/history/ || true
          fi

      # ---------- Artifacts ----------
      - name: Upload Allure results (JSON)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: target/allure-results
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Allure HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report-html
          path: allure-report
          if-no-files-found: warn
          retention-days: 7

      # ---------- Teardown ----------
      - name: Show last server logs
        if: always()
        run: |
          echo "---- uvicorn.log (tail) ----"
          tail -n 200 uvicorn.log || true

      - name: Stop FastAPI
        if: always()
        run: |
          if [ -f uvicorn.pid ]; then
            kill "$(cat uvicorn.pid)" || true
          fi

      # ---------- Pages artifact ----------
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-report

  publish-pages:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
